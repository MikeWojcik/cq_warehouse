.. Extensions sub-module documentation.

#######################################
extensions - CadQuery core enhancements
#######################################
This python module provides extensions to the native CadQuery code base.
Hopefully future generations of CadQuery will incorporate this or similar
functionality.

Examples illustrating how to use much of the functionality of this sub-package
can be found in the
`extensions_examples.py <https://github.com/gumyr/cq_warehouse/blob/main/examples/extensions_examples.py>`_
file.

To help the user in debugging exceptions generated by the Opencascade core, the
dreaded ``StdFail_NotDone`` exception is caught and augmented with a more
meaningful exception where possible (a new exception is raised from
StdFail_NotDone so no information is lost). In addition, python logging is used
internally which can be enabled (currently by un-commenting the logging
configuration code) to provide run-time information in a ``cq_warehouse.log``
file.

.. py:module:: extensions_doc

********************
CadQuery Integration
********************
In order for cq_warehouse CadQuery extensions to be recognized by IDEs (e.g. Intellisense)
the CadQuery source code needs to be updated. Although monkeypatching allows
for the functionality of CadQuery to be extended, these extensions are not
visible to the IDE which makes working with them more difficult.

The `build_cadquery_patch.py <https://github.com/gumyr/cq_warehouse/blob/main/scripts/build_cadquery_patch.py>`_
script takes the cq_warehouse extensions.py file (from your pip install) and generates a patch file
custom to the version of CadQuery that you're using (the version found with the python ``import cadquery``).
The user needs to apply the patch for the changes to take effect. Reversing the patch will restore the four changed
files. The patch command can also generate versioned backups of the changed files if
the user wants even more security.

Currently, cq_warehouse.extensions augments these four CadQuery source files:

* assembly.py,
* cq.py,
* geom.py,
* shapes.py, and
* sketch.py.

Usage:

.. doctest::

	>>> python build_cadquery_patch.py
	To apply the patch:
	    cd /home/gumyr/anaconda3/envs/cadquery-dev/lib/python3.9/site-packages/cadquery
	    patch -s -p4 < cadquery_extensions0.5.2.patch
	To reverse the patch:
	    patch -R -p4 < cadquery_extensions0.5.2.patch

.. warning::
	This script is designed to work on all platforms that support the ``diff`` and ``patch``
	commands but has only been tested on Ubuntu Linux.

Once the patch has been applied, IDE's like Visual Studio Code will see all the cq_warehouse extensions
as native CadQuery functionality and will show all the type hints and code completion available
with core CadQuery methods. It will look something like this:

.. image:: cq_extensions_intellisense.png

*********
Functions
*********

.. autofunction:: makeNonPlanarFace

*************************
Assembly class extensions
*************************

.. autoclass:: Assembly
	:members:

*********************
Edge class extensions
*********************

.. autoclass:: Edge
	:members:

*********************
Face class extensions
*********************

.. autoclass:: Face
	:members:

*************************
Location class extensions
*************************

.. autoclass:: Location
	:members: __str__

**********************
Plane class extensions
**********************

.. autoclass:: Plane
	:members:

**********************
Shape class extensions
**********************

.. autoclass:: Shape
	:members:

***********************
Sketch class extensions
***********************

.. autoclass:: Sketch
	:members:

***********************
Vector class extensions
***********************

.. autoclass:: Vector
	:members:

***********************
Vertex class extensions
***********************

.. autoclass:: Vertex
	:members: __add__, __sub__, __str__, toVector

*********************
Wire class extensions
*********************

.. autoclass:: Wire
	:members:

.. _Workplane Extensions:

**************************
Workplane class extensions
**************************

.. autoclass:: Workplane
	:members:

